= Building GGobi on Windows from Source =

This document attempts to explain how to build GGobi (>= 2.0) for Windows. It assumes that the reader is reasonably familiar with building packages in Linux. This process is reasonably streamlined compared to the past, as the MinGW environment has improved immensely.

== Getting the required tools and libraries: ==

=== MinGW: === 
The tools we use to build the GGobi distribution depend
on having the [http://www.mingw.org MinGW and MSYS tools]
installed.  MinGW is Minimalist GNU for Windows, 
essentially gcc for Windows. MSYS is a build environment for MinGW. An [http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer/mingw-get-inst/ automatic installer] is available. There are options within the installation that allow you to customize which 
packages are installed. 
Be sure that you install support for the MinGW base tools, C++ (libtool looks for it), and Fortran (if you want to build rggobi, it's an R thing). You'll also want the Developer Toolkit, which includes things like the GNU autotools.

=== GTK development environment: === 
Download the latest GTK+
[http://www.gtk.org/download-windows.html developer package] and install it into `MinGW/msys/1.0/local`. You might need to create the `local` directory. 

=== GObject Builder: === 
You need the 
[http://http://www.5z.com/jirka/gob.html GObject builder] to build GGobi from SVN.
Grab the binary attachment:"gob2.exe" and place it in `/usr/local/bin`. 

If you want to build it yourself, you need the Flex library. Get the package offered by the 
[http://unxutils.sourceforge.net/ UnxUtils project] and move the contents 
of the `/usr/local/lib` directory in the zip file to your `/GTK/lib` directory. 
Now you can unpack the gob2 archive into your home directory, `configure`, 
`make`, and `make install` it.

=== Nullsoft Installer: === 
GGobi uses the nullsoft installation system, so 
if you want to build the GGobi installer (exe), download and install the latest 
[http://nsis.sourceforge.net/ nullsoft installer] now.
You need to place the path to your `makensis.exe` in your `PATH` environment variable.

=== gtk-doc ===
The GGobi build scripts depend on gtk-doc, but there is no gtk-doc for Windows.
You won't need to build any documentation, so let's fake it. Download
the attachment:"gtk-doc-fake.tar.bz2" and extract it into `msys/local`. That archive contains a few
hacked files from gtk-doc that makes GGobi think gtk-doc is there and working.

=== Subversion: === 
In order to get the latest source code, you'll need 
[http://subversion.tigris.org/ subversion].

== Compilation: == 
Start MSYS. You will find yourself in your "user" directory. 
This is where we will do all of our work. Type 
{{{
svn co http://ggobi.org/svn/ggobi ggobi
}}}
to grab the entire repository, including Rggobi2, the website, the GGobi book, etc. 
If you're not a core GGobi dev or you're only interested in GGobi itself, 
{{{
svn co http://ggobi.org/svn/ggobi/ggobi/trunk ggobi
}}}
should do. Next, switch to the 
`~/ggobi/ggobi/trunk` (or `~/ggobi` if you only got GGobi) directory and type: 
{{{
./bootstrap
}}}
If that worked, the build system is ready to be configured:
{{{
./configure
}}}
and then `make`.

If you have trouble send an [mailto:ggobi-help@ggobi.org email], 
complete with the error messages from the MSYS window. We'll aim to help as
possible.

== Building the Self-installing Executable ==

To create the self-installing GGobi executable, we will use the Nullsoft Scriptable 
Installation System. 

Run `make win32-installer` to build the setup executable.

= Building RGGobi2 on Windows: =

Follow the instructions for building ggobi on Windows in the ggobi
distribution files. You'll at least need the same development
environment.

== Obtain necessary files ==
[http://www.ggobi.org/Download Download] the latest rggobi and 
unpack it into your home directory, if you didn't check out the entire GGobi SVN repository.

Building the R documentation requires a latex implementation. Get [http://www.miktex.org MiKTeX] and put latex.exe on your PATH. 

In order to build Windows help for the documentation, you need `hhc.exe`
from the [http://msdn.microsoft.com/library/default.asp?url=/library/en-us/htmlhelp/html/hwMicrosoftHTMLHelpDownloads.asp HTML Help Workshop] on your path. Yes, I know it's from Microsoft, but you need it.

The R build system requires [http://www.activestate.com/store/languages/register.plex?id=ActivePerl ActivePerl].
Make sure it (`/c/perl/bin`) is on your path BEFORE the `perl.exe` included with the MSYS DTK by typing:
{{{
export PATH="/c/Perl/bin:$PATH"
}}}

You'll also need the [http://gnuwin32.sf.net/packages/zip.htm zip] utility for compressing the packages.

== Build RGtk2 ==
Rggobi depends on RGtk2.

Get RGtk2 from svn:
{{{
svn co http://statgraphics.had.co.nz/svn/projects/rgtk2/trunk/RGtk2 RGtk2
}}}

Now enter the `RGtk2` directory, delete `src/Makevars.win` (it's only for CRAN) and run `./configure`.

Copy `inst/include/RGtk2/gtk.h` to `inst/include/RGtk2/gdk.h`. Remove the `src/RGtk2` file and replace it with a directory of the same name containing the headers in `inst/include/RGtk2`. These steps are necessary, because NTFS does not support symbolic links.

Next, you get to hack out the `cygdrive/` token from the `build` perl script in the R `bin` directory. We're using MSYS, not Cygwin, but R doesn't know that.

Now simply run
{{{
R CMD build --binary RGtk2
}}}
and install it through R.

== Build the binary R package ==
First, you need to tell rggobi the location of GGobi: 
{{{
  export GGOBI_ROOT=~/ggobi
}}}

Now, enter the `rggobi` directory, delete `src/Makevars.win` and run `./configure`.

Remove the `src/rggobi` file and replace it with a directory of the same name containing the headers in `inst/include/rggobi`. Move the `inst/gen/out` .R files to `R`, the .h to `src/rggobi` and the .c `src`, except the files with `Import` in their name need to go to `src/rggobi` and those with `Export` to `src/exports`.

In order to build the vignettes, you need to add `\usepackage{Sweave}` to them and place `Sweave.sty` on your LaTeX search path.

Finally, make sure R is on your path, and in the parent directory, run:
{{{
  Rcmd build --binary rggobi
}}}

== Installing the package ==

Install the Rggobi package using the R menu for installing packages.

You should be ready to start it up:

{{{
> library(rggobi)
> ggobi()
}}}

----
These notes are by Michael Lawrence.